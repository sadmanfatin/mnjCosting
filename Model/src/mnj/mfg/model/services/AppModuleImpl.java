package mnj.mfg.model.services;

import java.io.IOException;

import java.sql.CallableStatement;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import mnj.mfg.model.services.common.AppModule;

import mnj.mfg.model.views.DryDetailVOImpl;
import mnj.mfg.model.views.MnjMfgPrecostingHViewImpl;
import mnj.mfg.model.views.MnjMfgPrecostingItemDViewImpl;

import mnj.mfg.model.views.MnjMfgPrecostingLViewImpl;
import mnj.mfg.model.views.MnjMfgPrecostingWetDViewImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 23 16:30:24 BDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for MnjMfgPrecostingHView1.
     * @return MnjMfgPrecostingHView1
     */
    public ViewObjectImpl getMnjMfgPrecostingHView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgPrecostingHView1");
    }

    /**
     * Container's getter for MnjMfgPrecostingLView1.
     * @return MnjMfgPrecostingLView1
     */
    public ViewObjectImpl getMnjMfgPrecostingLView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgPrecostingLView1");
    }

    /**
     * Container's getter for MnjMfgPrecostingCountryDView1.
     * @return MnjMfgPrecostingCountryDView1
     */
    public ViewObjectImpl getMnjMfgPrecostingCountryDView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgPrecostingCountryDView1");
    }


    /**
     * Container's getter for MnjMfgPrecostingItemDView1.
     * @return MnjMfgPrecostingItemDView1
     */
    public ViewObjectImpl getMnjMfgPrecostingItemDView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgPrecostingItemDView1");
    }


    /**
     * Container's getter for MnjMfgPrecostingLFkLink1.
     * @return MnjMfgPrecostingLFkLink1
     */
    public ViewLinkImpl getMnjMfgPrecostingLFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgPrecostingLFkLink1");
    }

    /**
     * Container's getter for MnjMfgPrecostingCountryFk1Link1.
     * @return MnjMfgPrecostingCountryFk1Link1
     */
    public ViewLinkImpl getMnjMfgPrecostingCountryFk1Link1() {
        return (ViewLinkImpl)findViewLink("MnjMfgPrecostingCountryFk1Link1");
    }


    /**
     * Container's getter for MnjMfgPrecostingItemDFkLink1.
     * @return MnjMfgPrecostingItemDFkLink1
     */
    public ViewLinkImpl getMnjMfgPrecostingItemDFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgPrecostingItemDFkLink1");
    }


    public void setSessionValues(String userId, String orgId, String respId,
                                 String respApplId) {

        FacesContext fctx = FacesContext.getCurrentInstance();
        ExternalContext ectx = fctx.getExternalContext();
      HttpSession userSession = (HttpSession)ectx.getSession(false);
//        
//        userId= "5219";
 //userSession.setAttribute("userIdS", userId);
        if (userId != null) {

            userSession.setAttribute("orgIdS", orgId);
            userSession.setAttribute("userIdS", userId);
            userSession.setAttribute("respIdS", respId);
            userSession.setAttribute("respApplIdS", respApplId);
            userSession.setAttribute("KeyFlag", getRespKey(respId));

        }


    }

    public String getRespKey(String respId) {

        String value = null;

        String stmt = "BEGIN :1 := mnj_precosting_common_pkg.getKey(:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.setString(2, respId);
            cs.execute();
            value = cs.getString(1);
            cs.close();
        } catch (Exception e) {
            ;
        }
        return value;
    }

    public double getCostProdPerLine(String name, String projectionNo) {
        double value = 0;

        String stmt =
            "BEGIN :1 := mnj_precost_get_prod_per_line(:2, :3); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.setString(2, name);
            cs.setString(3, projectionNo);
            cs.execute();
            value = cs.getDouble(1);
            cs.close();
        } catch (Exception e) {
            ;
        }
       
        
        return value;
    }


    public String copyRecords(String type, String headerId, String lineId) {
        String value = null;
        String stmt =
            "BEGIN :1 := mnj_precosting_common_pkg.MAKE_COPY(:2,:3, :4); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.setString(2, type);
            cs.setString(3, headerId);
            cs.setString(4, lineId);
            cs.execute();
            value = cs.getString(1);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }
        getMnjMfgPrecostingLView1().executeQuery();
        return value;
    }

    public String createItems(String headerId) {

        String value = null;

        //value = validateLines();  //no need to check duplicate wash & colour 21dec2017 
        value = "OK";
        if (!value.equalsIgnoreCase("OK")) {

            return "Duplicate wash & color found . Please enter correct data.";
        }

        String stmt =
            "BEGIN  MNJ_ITEM_API_PRECOSTING.mnj_create_item_api(:1,:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setString(1, headerId);
            cs.execute();
            value = cs.getString(2);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }

        return value;
    }

    public String createOrder(String headerId) {
        String value = null;
        String stmt =
            "BEGIN  Create_PreCostSO_PKG.Create_PreCost_SO(:1,:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setString(1, headerId);
            cs.execute();
            value = cs.getString(2);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }
        return value;


    }
    
    public String createOrderLines(String headerId, String lineId) {
        String value = null;
        String stmt =
            "BEGIN  Create_PreCostSO_PKG.create_bpo_line(:1,:2, :3); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.setString(1, headerId);
            cs.setString(2, lineId);
            cs.execute();
            value = cs.getString(3);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }
        return value;


    }
    
    
    

    /*************************************************************
     * Update Sale Orders lines
     * **********************************/

    public String updateOrder(String headerId) {

        System.out.println("Header Id in AM -->" + headerId);
        String value = null;
        String stmt =
            "BEGIN  Create_PreCostSO_PKG.Update_PreCost_Line_SO(:1,:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setString(1, headerId);
            cs.execute();
            value = cs.getString(2);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }
        return value;
    }

    /*************************************************************************
     * POC Approvale Procedures
     * *****************************************************************/


    public void Approve(String headerId) {

        int status = 0;
        String stmt = "BEGIN  MNJ_POC_WF_PKG.wf_poc_appr_main(:1,:2); end;";

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String userId = (String)sessionScope.get("userIdS");


        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {

            //            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.setInt(1, Integer.parseInt(headerId));
            cs.setString(2, userId);
            cs.execute();
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        //        ViewObject vo = getMnjMfgPrecostingHView1();
        //        vo.getCurrentRow().setAttribute("GmStatus", "In process");
        //        vo.getCurrentRow().setAttribute("GmApproval", "I");
        //        getDBTransaction().commit();

        System.out.println("Inquiry Id-" + headerId);


    }

    public void ApproveNForward(String headerId) {

        int status = 0;
        String stmt =
            "BEGIN  MNJ_POC_WF_PKG.wf_poc_appr_fwd_main(:1, :2); end;";

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String userId = (String)sessionScope.get("userIdS");

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {

            //            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.setInt(1, Integer.parseInt(headerId));
            cs.setString(2, userId);
            cs.execute();
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("Inquiry Id ---->" + headerId);


    }


    /**
     * Container's getter for MnjMfgPrecostingWetDView1.
     * @return MnjMfgPrecostingWetDView1
     */
    public ViewObjectImpl getMnjMfgPrecostingWetDView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgPrecostingWetDView1");
    }

    /**
     * Container's getter for LinesWetDetailVL1.
     * @return LinesWetDetailVL1
     */
    public ViewLinkImpl getLinesWetDetailVL1() {
        return (ViewLinkImpl)findViewLink("LinesWetDetailVL1");
    }

    /**
     * Container's getter for DryDetailVO1.
     * @return DryDetailVO1
     */
    public ViewObjectImpl getDryDetailVO1() {
        return (ViewObjectImpl)findViewObject("DryDetailVO1");
    }

    /**
     * Container's getter for LinesDryVL1.
     * @return LinesDryVL1
     */
    public ViewLinkImpl getLinesDryVL1() {
        return (ViewLinkImpl)findViewLink("LinesDryVL1");
    }
    
    public String getBuyerWiseComm(){
        
        ViewObject hvo = getMnjMfgPrecostingHView1();    
        Row r = hvo.getCurrentRow();
        
        String buyerId = r.getAttribute("BuyerId").toString();
        
        ViewObject comVo = getBuyerWiseCommDetVO1();
        comVo.setWhereClause("BUYER_ID="+buyerId);
        comVo.executeQuery();
        comVo.first();
        String com = null;
        try {
            
            com = comVo.getCurrentRow().getAttribute("Comm").toString();
            
        } catch (Exception e) {
            
            ;
        }
        return com;
        
    }


    public Row createLines() {

        ViewObject vo = getMnjMfgPrecostingLView1();
        RowSetIterator it = vo.createRowSetIterator("rr");
        int subCostNo = 1;
        while (it.hasNext()) {

            Object val = it.next().getAttribute("HeaderNumber");
            if (val != null) {
                subCostNo = Integer.parseInt(val.toString());
                subCostNo = subCostNo + 1;
            }
        }
        it.closeRowSetIterator();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        row.setAttribute("HeaderNumber", subCostNo);
        row.setAttribute("CommisonPrcnt", getBuyerWiseComm());
        //row.setAttribute("ProdCostHour", getProdCostUnitWise(null));        

        return row;

    } //end of createHeader


    /**
     * Container's getter for ProjectionLinesVO1.
     * @return ProjectionLinesVO1
     */
    public ViewObjectImpl getProjectionLinesVO1() {
        return (ViewObjectImpl)findViewObject("ProjectionLinesVO1");
    }

    public void CopyPrecost(String type) {

System.out.println("CopyPrecost  AM  1");
        ViewObject vo = getMnjMfgPrecostingHView1();
        String headerId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();
        System.out.println("CopyPrecost  AM  2---->>"+headerId);

        String stmt = "BEGIN  cust_mnj_ont_pkg.COPY_PRECOSTING(:1, :2); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {

            //            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.setInt(1, Integer.parseInt(headerId));
            cs.setString(2, type);
            cs.execute();
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        vo.executeQuery();
        System.out.println("CopyPrecost  AM  3---->>"+headerId);

    }

    /**
     * Container's getter for CreateSaleOrderLinesVO1.
     * @return CreateSaleOrderLinesVO1
     */
    public ViewObjectImpl getCreateSaleOrderLinesVO1() {
        return (ViewObjectImpl)findViewObject("CreateSaleOrderLinesVO1");
    }

    /**
     * Container's getter for HeaderCreatOrderLinesVL1.
     * @return HeaderCreatOrderLinesVL1
     */
    public ViewLinkImpl getHeaderCreatOrderLinesVL1() {
        return (ViewLinkImpl)findViewLink("HeaderCreatOrderLinesVL1");
    }


    public void MakeLinesClone() {

        ViewObject cloneVo = getCreateSaleOrderLinesVO1();

        Row currRow = cloneVo.getCurrentRow();
        Row cloneRow = getClonLine(cloneVo);

        cloneRow.setAttribute("CloneFlag", "Y");

        try {
            cloneRow.setAttribute("HeaderNumber",
                                  currRow.getAttribute("HeaderNumber"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("FabricDesc",
                                  currRow.getAttribute("FabricDesc"));
        } catch (Exception e) {
            ;
        }

        try {
            cloneRow.setAttribute("WashName",
                                  currRow.getAttribute("WashName"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("Colour", currRow.getAttribute("Colour"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("FobWitoutComm",
                                  currRow.getAttribute("FobWitoutComm"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("FobWithComm",
                                  currRow.getAttribute("FobWithComm"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("FobWithSmsSample",
                                  currRow.getAttribute("FobWithSmsSample"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("CloneRowId",
                                  currRow.getAttribute("LineId"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("ItemId", currRow.getAttribute("ItemId"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("RequestId",
                                  currRow.getAttribute("RequestId"));
        } catch (Exception e) {
            ;
        }

        try {
            cloneRow.setAttribute("ChildStyleNo",
                                  currRow.getAttribute("ChildStyleNo"));
        } catch (Exception e) {
            ;
        }
        
        try {
            cloneRow.setAttribute("DeliveryStartDate",
                                  currRow.getAttribute("DeliveryStartDate"));
        } catch (Exception e) {
            ;
        }
        
        try {
            cloneRow.setAttribute("Clasfic",
                                  currRow.getAttribute("Clasfic"));
        } catch (Exception e) {
            ;
        }
        
        try {
            cloneRow.setAttribute("Incoterms",
                                  currRow.getAttribute("Incoterms"));
        } catch (Exception e) {
            ;
        }
        
        try {
            cloneRow.setAttribute("PoType",
                                  currRow.getAttribute("PoType"));
        } catch (Exception e) {
            ;
        }
        
        
        
        
        
        


    }
    
    public void createBPODetailRow() {

        ViewObject cloneVo = getCreateSaleOrderLinesVO1();
        ViewObject bpoDetVo = getMnjPrecostCreateBpoDVO1();

        Row currRow = cloneVo.getCurrentRow();
        Row cloneRow = getClonLine(bpoDetVo);

        try {
            cloneRow.setAttribute("FabricDesc",
                                  currRow.getAttribute("FabricDesc"));
        } catch (Exception e) {
            ;
        }

        try {
            cloneRow.setAttribute("WashName",
                                  currRow.getAttribute("WashName"));
        } catch (Exception e) {
            ;
        }
        try {
            cloneRow.setAttribute("Color", currRow.getAttribute("Colour"));
        } catch (Exception e) {
            ;
        }
    
        try {
            cloneRow.setAttribute("Fob",
                                  currRow.getAttribute("FobWithSmsSample"));
        } catch (Exception e) {
            ;
        }
        
        try {
            cloneRow.setAttribute("ChildStyleNo",
                                  currRow.getAttribute("ChildStyleNo"));
        } catch (Exception e) {
            ;
        }
      
     

    }

    

    public Row getClonLine(ViewObject vo) {

        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    }


    /**
     * Container's getter for UpdateOrderInterface1.
     * @return UpdateOrderInterface1
     */
    public ViewObjectImpl getUpdateOrderInterface1() {
        return (ViewObjectImpl)findViewObject("UpdateOrderInterface1");
    }

    /**
     * Container's getter for LineHistoryVL1.
     * @return LineHistoryVL1
     */
    public ViewLinkImpl getLineHistoryVL1() {
        return (ViewLinkImpl)findViewLink("LineHistoryVL1");
    }

    public void validateLines() {

        ViewObject vo = getMnjMfgPrecostingLView1();

        RowSetIterator it = vo.createRowSetIterator("it");

        HashSet<String> hset = new HashSet<String>();
        HashSet<String> hset1 = new HashSet<String>();
        ArrayList list= new ArrayList();

        int count = 0;
        int flag=0;
        String status = null;
        while (it.hasNext()) {
            count++;
            Row r = it.next();
            String washName = r.getAttribute("WashName").toString();
            String color = r.getAttribute("Colour").toString();
            washName = washName.trim().toUpperCase();
            color = color.trim().toUpperCase();
            hset.add(washName + color);
        if(count!=hset.size()) {
            list.add(count);
        
      String remark =null;
       // remark=remark.trim().toUpperCase();
      try{
          flag++;
          remark=r.getAttribute("Remarks").toString();
          remark=remark.trim().toUpperCase();
          hset1.add(remark);
          if(flag!=hset1.size()) {
              String message ="Duplicate remark";
              FacesMessage fm = new FacesMessage(message);
              fm.setSeverity(FacesMessage.SEVERITY_INFO);
              FacesContext context = FacesContext.getCurrentInstance();
              context.addMessage(null, fm);
          }
          
      }catch(Exception ex){
          
          remark="check";
      }
     
      
         if(remark=="check"){
             String message ="Check remark";
             FacesMessage fm = new FacesMessage(message);
             fm.setSeverity(FacesMessage.SEVERITY_INFO);
             FacesContext context = FacesContext.getCurrentInstance();
             context.addMessage(null, fm);
             
             
         }
        }
        
        } //end
        
        //.....................mywork...................//
        
      System.out.println("----------------------------------------------------------------"+list);
      
        it.closeRowSetIterator();
        
       
         
        
//        if (count == hset.size()) {
//            hset = null;
//            return "NotSame";
//        } else {
//            
//            
//            
//            hset = null;
//            return "Same";
//        }


    } //end of looop

    /***********************************************************
     * Added by Parvez on 11-11-15 01:00 PM
     * ************************************************************************/
    public double getProdCostUnitWise(String unitName) {

        ViewObject hvo = getMnjMfgPrecostingHView1();
        if (unitName == null) {
           
            try {
                unitName =
                        hvo.getCurrentRow().getAttribute("ProductionUnit").toString();
            } catch (Exception e) {
                ;
            }
            
        }
        String date=null;
        try {
            date=hvo.getCurrentRow().getAttribute("CreationDate").toString();
        } catch (Exception e) {
            ;
        }
        //end of if condition
        System.out.println(" creation date for unit is ----------------------->"+date);
        double srno = 0;
        String stmt = "BEGIN :1 := mnj_get_preccost_cost_per_hour(:2,:3); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.setString(2, unitName);
            cs.setString(3,date);
            cs.execute();
            srno = cs.getDouble(1);
            cs.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return srno;
    }

    /***********************************************************
     * Added by Parvez on 11-11-15 01:00 PM
     * ************************************************************************/
    public void refreshProdCostLineWise(String unitName) {


        ViewObject vo = getMnjMfgPrecostingLView1();
        RowSetIterator it = vo.createRowSetIterator("line");
        double val = getProdCostUnitWise(unitName);
        while (it.hasNext()) {
            it.next().setAttribute("ProdCostHour", val);

        }
        it.closeRowSetIterator();


    }
    
    
    public double getPOCFinCost(String type) {

        String stmt = "BEGIN :1 :=mnj_precosting_common_pkg.getFinanceAmount(:2); end;";
        double amount = 0.0;
        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
       
        try {

            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.setString(2, type);            
            cs.execute();
            amount = cs.getDouble(1);            
            cs.close();

        } catch (Exception e) {
            ;
        }

        
         return amount ;
    }


    /**
     * Container's getter for BuyerWiseCommDetVO1.
     * @return BuyerWiseCommDetVO1
     */
    public ViewObjectImpl getBuyerWiseCommDetVO1() {
        return (ViewObjectImpl)findViewObject("BuyerWiseCommDetVO1");
    }

    /**
     * Container's getter for MnjPrecostCreateBpoDVO1.
     * @return MnjPrecostCreateBpoDVO1
     */
    public ViewObjectImpl getMnjPrecostCreateBpoDVO1() {
        return (ViewObjectImpl)findViewObject("MnjPrecostCreateBpoDVO1");
    }

    /**
     * Container's getter for CreateBPOLinesDetVL1.
     * @return CreateBPOLinesDetVL1
     */
    public ViewLinkImpl getCreateBPOLinesDetVL1() {
        return (ViewLinkImpl)findViewLink("CreateBPOLinesDetVL1");
    }
    
    public void refreshCreateBPODetail(){
        
        
       ViewObject vo =  getMnjPrecostCreateBpoDVO1();
       vo.executeQuery();
        System.out.println("Excute query-----"+vo.getQuery());
        
    }
    

    public String createTBAOrder(String headerId) {
        String value = null;
        String stmt =
            "BEGIN  Create_Precostso_Pkg.Create_Precost_Sub_So(:1,:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setString(1, headerId);
            cs.execute();
            value = cs.getString(2);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }
        return value;
}
    

    public String UpdateBPO(String headerId) {
        String value = null;
        String stmt =
            "BEGIN  Create_PreCostSo_Pkg.Update_PreCostSo(:1,:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setString(1, headerId);
            cs.execute();
            value = cs.getString(2);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }
        return value;
    }
    

    public String CancelBPO(String headerId) {
        String value = null;
        String stmt =
            "BEGIN  Create_PreCostSO_PKG.Cancel_PreCostSO(:1,:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setString(1, headerId);
            cs.execute();
            value = cs.getString(2);
            cs.close();
        } catch (Exception e) {
            value = e.getMessage();
        }
        return value;
    }
    

    public double getBPOQty_Tot() {

    //    ViewObject vo = getCreateSaleOrderLinesVO1();
      //  RowSetIterator ab = vo.createRowSetIterator("ab");
        double val = 0.00, total = 0.00;
      /* while (ab.hasNext()) {

            val = Double.parseDouble(ab.next().getAttribute("BpoQty").toString());
           // Double.parseDouble(r.getAttribute("BpoQty").toString());
               total = total + val;            
        }
        ab.closeRowSetIterator();
        System.out.println("total------>"+total);
        */        return total;}


    /**
     * Container's getter for MNJPOC_Bpo_UploadVO1.
     * @return MNJPOC_Bpo_UploadVO1
     */
    public ViewObjectImpl getMNJPOC_Bpo_UploadVO1() {
        return (ViewObjectImpl)findViewObject("MNJPOC_Bpo_UploadVO1");
    }
    public void UploadBPO_Block() {
        //System.out.println("UploadBPO_Block Level 1");
        
        int P_LINE_ID=0;
        ViewObject hvo = getCreateSaleOrderLinesVO1();
        try {
             P_LINE_ID =    Integer.parseInt(hvo.getCurrentRow().getAttribute("LineId").toString());
          //  System.out.println("UploadBPO_Block Level 2---->"+P_LINE_ID);
            
        } catch (Exception e) {
            ;//System.out.println("UploadBPO_Block Level 3---->"+e.getMessage());
            
        }
        
       
        String stmt = "BEGIN mnj_precosting_common_pkg.Upload_Bpo_Detail_Block(:1); end;";
        double amount = 0.0;
        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        //System.out.println("UploadBPO_Block Level 4---->"+P_LINE_ID);
        
        try {

            cs.setInt(1, P_LINE_ID);            
            cs.execute();
            cs.close();
//            System.out.println("UploadBPO_Block Level 5---->"+P_LINE_ID);
            
        } catch (Exception e) {;
           // System.out.println("UploadBPO_Block Level 6---->"+e.getMessage());
            
        }
        
    //    hvo.executeQuery();
    }


    public void CopyAllPrecost(String type) {

        ViewObject vo = getMnjMfgPrecostingHView1();
        String headerId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();

        String stmt = "BEGIN  cust_mnj_ont_pkg.COPY_PRECOSTING(:1, :2); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.setInt(1, Integer.parseInt(headerId));
            cs.setString(2, type);
            cs.execute();
            cs.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        vo.executeQuery();
    }



    public void CopyItemsDetail(){
        
        ViewObject hvo = getMnjMfgPrecostingItemDView1();    
        Row r = hvo.getCurrentRow();
        String DetailId = r.getAttribute("DetailId").toString();
       System.out.println("DetailId-------------->>"+DetailId);
           String stmt = "BEGIN mnj_precosting_common_pkg.Copy_Item_Detail(:1); end;";
           double amount = 0.0;
           CallableStatement cs =
               getDBTransaction().createCallableStatement(stmt, 1);
           try {
               cs.setInt(1, Integer.parseInt(DetailId));
               cs.execute();
               cs.close();
           } catch (Exception e) {  ;      }
          hvo.executeQuery();
               System.out.println("DetailId 123-------------->>"+DetailId);
               
           }





    public void ClearTempUploadBlock() {
        //System.out.println("UploadBPO_Block Level 1");
        
        String stmt = "BEGIN mnj_precosting_common_pkg.ClearTempUploadBlock; end;";
        double amount = 0.0;
        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            
            cs.execute();
            cs.close();
        } catch (Exception e) {  ;      }
         }


    public void StyleTracking() {
        //System.out.println("UploadBPO_Block Level 1");
        ViewObject vo = getMnjMfgPrecostingHView1();
        String headerId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();
        
        String stmt = "BEGIN mnj_precosting_common_pkg.SET_TRACKING_NO(:1); end;";
        double amount = 0.0;
        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.setString(1, headerId);
            cs.execute();
            cs.close();
        } catch (Exception e) {  ;      }
         }


    /**
     * Container's getter for POCLinesCopyVO1.
     * @return POCLinesCopyVO1
     */
    public ViewObjectImpl getPOCLinesCopyVO1() {
        return (ViewObjectImpl)findViewObject("POCLinesCopyVO1");
    }

    /**
     * Container's getter for sizeHeaderVO1.
     * @return sizeHeaderVO1
     */
    public ViewObjectImpl getsizeHeaderVO1() {
        return (ViewObjectImpl)findViewObject("sizeHeaderVO1");
    }


    /**
     * Container's getter for CustMnjOntSoObinSizline_LineVO1.
     * @return CustMnjOntSoObinSizline_LineVO1
     */
    public ViewObjectImpl getCustMnjOntSoObinSizline_LineVO1() {
        return (ViewObjectImpl)findViewObject("CustMnjOntSoObinSizline_LineVO1");
    }

    /**
     * Container's getter for HeaderLineVL1.
     * @return HeaderLineVL1
     */
    public ViewLinkImpl getHeaderLineVL1() {
        return (ViewLinkImpl)findViewLink("HeaderLineVL1");
    }

    /**
     * Container's getter for CustMnjOntSoObinsline_DetailVO1.
     * @return CustMnjOntSoObinsline_DetailVO1
     */
    public ViewObjectImpl getCustMnjOntSoObinsline_DetailVO1() {
        return (ViewObjectImpl)findViewObject("CustMnjOntSoObinsline_DetailVO1");
    }

    /**
     * Container's getter for CustMnjOntSoObinslineFkLink1.
     * @return CustMnjOntSoObinslineFkLink1
     */
    public ViewLinkImpl getCustMnjOntSoObinslineFkLink1() {
        return (ViewLinkImpl)findViewLink("CustMnjOntSoObinslineFkLink1");
    }

    /**
     * Container's getter for searchVO1.
     * @return searchVO1
     */
    public ViewObjectImpl getsearchVO1() {
        return (ViewObjectImpl)findViewObject("searchVO1");
    }

    /**
     * Container's getter for FebricView1.
     * @return FebricView1
     */
    public ViewObjectImpl getFebricView1() {
        return (ViewObjectImpl)findViewObject("FebricView1");
    }

    /**
     * Container's getter for line_Vs_febric_detViewlink1.
     * @return line_Vs_febric_detViewlink1
     */
    public ViewLinkImpl getline_Vs_febric_detViewlink1() {
        return (ViewLinkImpl)findViewLink("line_Vs_febric_detViewlink1");
    }

    /**
     * Container's getter for OtherView1.
     * @return OtherView1
     */
    public ViewObjectImpl getOtherView1() {
        return (ViewObjectImpl)findViewObject("OtherView1");
    }

    /**
     * Container's getter for Line_Vs_OtherViewLink1.
     * @return Line_Vs_OtherViewLink1
     */
    public ViewLinkImpl getLine_Vs_OtherViewLink1() {
        return (ViewLinkImpl)findViewLink("Line_Vs_OtherViewLink1");
    }

    /**
     * Container's getter for TrimsView1.
     * @return TrimsView1
     */
    public ViewObjectImpl getTrimsView1() {
        return (ViewObjectImpl)findViewObject("TrimsView1");
    }

    /**
     * Container's getter for Line_Vs_TrimsViewLink1.
     * @return Line_Vs_TrimsViewLink1
     */
    public ViewLinkImpl getLine_Vs_TrimsViewLink1() {
        return (ViewLinkImpl)findViewLink("Line_Vs_TrimsViewLink1");
    }

    /**
     * Container's getter for serviceLov1.
     * @return serviceLov1
     */
    public ViewObjectImpl getserviceLov1() {
        return (ViewObjectImpl)findViewObject("serviceLov1");
    }

    /**
     * Container's getter for searchVIEW1.
     * @return searchVIEW1
     */
    public ViewObjectImpl getsearchVIEW1() {
        return (ViewObjectImpl)findViewObject("searchVIEW1");
    }

    /**
     * Container's getter for shipmentVO1.
     * @return shipmentVO1
     */
    public ViewObjectImpl getshipmentVO1() {
        return (ViewObjectImpl)findViewObject("shipmentVO1");
    }

    /**
     * Container's getter for detailsReport1.
     * @return detailsReport1
     */
    public ViewObjectImpl getdetailsReport1() {
        return (ViewObjectImpl)findViewObject("detailsReport1");
    }

    /**
     * Container's getter for FilterView1.
     * @return FilterView1
     */
    public ViewObjectImpl getFilterView1() {
        return (ViewObjectImpl)findViewObject("FilterView1");
    }

    /**
     * Container's getter for ItemPurchaseTypeLOV1.
     * @return ItemPurchaseTypeLOV1
     */
    public ViewObjectImpl getItemPurchaseTypeLOV1() {
        return (ViewObjectImpl)findViewObject("ItemPurchaseTypeLOV1");
    }

    /**
     * Container's getter for orderVsSaleVO1.
     * @return orderVsSaleVO1
     */
    public ViewObjectImpl getorderVsSaleVO1() {
        return (ViewObjectImpl)findViewObject("orderVsSaleVO1");
    }

    /**
     * Container's getter for orderDetailsVO1.
     * @return orderDetailsVO1
     */
    public ViewObjectImpl getorderDetailsVO1() {
        return (ViewObjectImpl)findViewObject("orderDetailsVO1");
    }

    /**
     * Container's getter for orderSaleVsOrderDetailsVL1.
     * @return orderSaleVsOrderDetailsVL1
     */
    public ViewLinkImpl getorderSaleVsOrderDetailsVL1() {
        return (ViewLinkImpl)findViewLink("orderSaleVsOrderDetailsVL1");
    }

    /**
     * Container's getter for salesDetailsVO1.
     * @return salesDetailsVO1
     */
    public ViewObjectImpl getsalesDetailsVO1() {
        return (ViewObjectImpl)findViewObject("salesDetailsVO1");
    }

    /**
     * Container's getter for orderVsSaleVsSalesDetailsVL1.
     * @return orderVsSaleVsSalesDetailsVL1
     */
    public ViewLinkImpl getorderVsSaleVsSalesDetailsVL1() {
        return (ViewLinkImpl)findViewLink("orderVsSaleVsSalesDetailsVL1");
    }

    /**
     * Container's getter for washCostReport1.
     * @return washCostReport1
     */
    public ViewObjectImpl getwashCostReport1() {
        return (ViewObjectImpl)findViewObject("washCostReport1");
    }
} //end of class 
